// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi.proto

package com.github.gnmi.proto;

public interface SubscriptionListOrBuilder extends
    // @@protoc_insertion_point(interface_extends:gnmi.SubscriptionList)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Prefix used for paths.
   * </pre>
   *
   * <code>.gnmi.Path prefix = 1;</code>
   */
  boolean hasPrefix();
  /**
   * <pre>
   * Prefix used for paths.
   * </pre>
   *
   * <code>.gnmi.Path prefix = 1;</code>
   */
  com.github.gnmi.proto.Path getPrefix();
  /**
   * <pre>
   * Prefix used for paths.
   * </pre>
   *
   * <code>.gnmi.Path prefix = 1;</code>
   */
  com.github.gnmi.proto.PathOrBuilder getPrefixOrBuilder();

  /**
   * <pre>
   * Set of subscriptions to create.
   * </pre>
   *
   * <code>repeated .gnmi.Subscription subscription = 2;</code>
   */
  java.util.List<com.github.gnmi.proto.Subscription> 
      getSubscriptionList();
  /**
   * <pre>
   * Set of subscriptions to create.
   * </pre>
   *
   * <code>repeated .gnmi.Subscription subscription = 2;</code>
   */
  com.github.gnmi.proto.Subscription getSubscription(int index);
  /**
   * <pre>
   * Set of subscriptions to create.
   * </pre>
   *
   * <code>repeated .gnmi.Subscription subscription = 2;</code>
   */
  int getSubscriptionCount();
  /**
   * <pre>
   * Set of subscriptions to create.
   * </pre>
   *
   * <code>repeated .gnmi.Subscription subscription = 2;</code>
   */
  java.util.List<? extends com.github.gnmi.proto.SubscriptionOrBuilder> 
      getSubscriptionOrBuilderList();
  /**
   * <pre>
   * Set of subscriptions to create.
   * </pre>
   *
   * <code>repeated .gnmi.Subscription subscription = 2;</code>
   */
  com.github.gnmi.proto.SubscriptionOrBuilder getSubscriptionOrBuilder(
      int index);

  /**
   * <pre>
   * DSCP marking to be used.
   * </pre>
   *
   * <code>.gnmi.QOSMarking qos = 4;</code>
   */
  boolean hasQos();
  /**
   * <pre>
   * DSCP marking to be used.
   * </pre>
   *
   * <code>.gnmi.QOSMarking qos = 4;</code>
   */
  com.github.gnmi.proto.QOSMarking getQos();
  /**
   * <pre>
   * DSCP marking to be used.
   * </pre>
   *
   * <code>.gnmi.QOSMarking qos = 4;</code>
   */
  com.github.gnmi.proto.QOSMarkingOrBuilder getQosOrBuilder();

  /**
   * <code>.gnmi.SubscriptionList.Mode mode = 5;</code>
   */
  int getModeValue();
  /**
   * <code>.gnmi.SubscriptionList.Mode mode = 5;</code>
   */
  com.github.gnmi.proto.SubscriptionList.Mode getMode();

  /**
   * <pre>
   * Whether elements of the schema that are marked as eligible for aggregation
   * should be aggregated or not.
   * </pre>
   *
   * <code>bool allow_aggregation = 6;</code>
   */
  boolean getAllowAggregation();

  /**
   * <pre>
   * The set of schemas that define the elements of the data tree that should
   * be sent by the target.
   * </pre>
   *
   * <code>repeated .gnmi.ModelData use_models = 7;</code>
   */
  java.util.List<com.github.gnmi.proto.ModelData> 
      getUseModelsList();
  /**
   * <pre>
   * The set of schemas that define the elements of the data tree that should
   * be sent by the target.
   * </pre>
   *
   * <code>repeated .gnmi.ModelData use_models = 7;</code>
   */
  com.github.gnmi.proto.ModelData getUseModels(int index);
  /**
   * <pre>
   * The set of schemas that define the elements of the data tree that should
   * be sent by the target.
   * </pre>
   *
   * <code>repeated .gnmi.ModelData use_models = 7;</code>
   */
  int getUseModelsCount();
  /**
   * <pre>
   * The set of schemas that define the elements of the data tree that should
   * be sent by the target.
   * </pre>
   *
   * <code>repeated .gnmi.ModelData use_models = 7;</code>
   */
  java.util.List<? extends com.github.gnmi.proto.ModelDataOrBuilder> 
      getUseModelsOrBuilderList();
  /**
   * <pre>
   * The set of schemas that define the elements of the data tree that should
   * be sent by the target.
   * </pre>
   *
   * <code>repeated .gnmi.ModelData use_models = 7;</code>
   */
  com.github.gnmi.proto.ModelDataOrBuilder getUseModelsOrBuilder(
      int index);

  /**
   * <pre>
   * The encoding that the target should use within the Notifications generated
   * corresponding to the SubscriptionList.
   * </pre>
   *
   * <code>.gnmi.Encoding encoding = 8;</code>
   */
  int getEncodingValue();
  /**
   * <pre>
   * The encoding that the target should use within the Notifications generated
   * corresponding to the SubscriptionList.
   * </pre>
   *
   * <code>.gnmi.Encoding encoding = 8;</code>
   */
  com.github.gnmi.proto.Encoding getEncoding();

  /**
   * <pre>
   * An optional field to specify that only updates to current state should be
   * sent to a client. If set, the initial state is not sent to the client but
   * rather only the sync message followed by any subsequent updates to the
   * current state. For ONCE and POLL modes, this causes the server to send only
   * the sync message (Sec. 3.5.2.3).
   * </pre>
   *
   * <code>bool updates_only = 9;</code>
   */
  boolean getUpdatesOnly();
}
