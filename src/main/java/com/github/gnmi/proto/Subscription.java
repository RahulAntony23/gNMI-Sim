// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi.proto

package com.github.gnmi.proto;

/**
 * <pre>
 * Subscription is a single request within a SubscriptionList. The path
 * specified is interpreted (along with the prefix) as the elements of the data
 * tree that the client is subscribing to. The mode determines how the target
 * should trigger updates to be sent.
 * Reference: gNMI Specification Section 3.5.1.3
 * </pre>
 *
 * Protobuf type {@code gnmi.Subscription}
 */
public  final class Subscription extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:gnmi.Subscription)
    SubscriptionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Subscription.newBuilder() to construct.
  private Subscription(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Subscription() {
    mode_ = 0;
    sampleInterval_ = 0L;
    suppressRedundant_ = false;
    heartbeatInterval_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Subscription(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.github.gnmi.proto.Path.Builder subBuilder = null;
            if (path_ != null) {
              subBuilder = path_.toBuilder();
            }
            path_ = input.readMessage(com.github.gnmi.proto.Path.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(path_);
              path_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            mode_ = rawValue;
            break;
          }
          case 24: {

            sampleInterval_ = input.readUInt64();
            break;
          }
          case 32: {

            suppressRedundant_ = input.readBool();
            break;
          }
          case 40: {

            heartbeatInterval_ = input.readUInt64();
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.gnmi.proto.GnmiProto.internal_static_gnmi_Subscription_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.gnmi.proto.GnmiProto.internal_static_gnmi_Subscription_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.gnmi.proto.Subscription.class, com.github.gnmi.proto.Subscription.Builder.class);
  }

  public static final int PATH_FIELD_NUMBER = 1;
  private com.github.gnmi.proto.Path path_;
  /**
   * <pre>
   * The data tree path.
   * </pre>
   *
   * <code>.gnmi.Path path = 1;</code>
   */
  public boolean hasPath() {
    return path_ != null;
  }
  /**
   * <pre>
   * The data tree path.
   * </pre>
   *
   * <code>.gnmi.Path path = 1;</code>
   */
  public com.github.gnmi.proto.Path getPath() {
    return path_ == null ? com.github.gnmi.proto.Path.getDefaultInstance() : path_;
  }
  /**
   * <pre>
   * The data tree path.
   * </pre>
   *
   * <code>.gnmi.Path path = 1;</code>
   */
  public com.github.gnmi.proto.PathOrBuilder getPathOrBuilder() {
    return getPath();
  }

  public static final int MODE_FIELD_NUMBER = 2;
  private int mode_;
  /**
   * <pre>
   * Subscription mode to be used.
   * </pre>
   *
   * <code>.gnmi.SubscriptionMode mode = 2;</code>
   */
  public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * Subscription mode to be used.
   * </pre>
   *
   * <code>.gnmi.SubscriptionMode mode = 2;</code>
   */
  public com.github.gnmi.proto.SubscriptionMode getMode() {
    @SuppressWarnings("deprecation")
    com.github.gnmi.proto.SubscriptionMode result = com.github.gnmi.proto.SubscriptionMode.valueOf(mode_);
    return result == null ? com.github.gnmi.proto.SubscriptionMode.UNRECOGNIZED : result;
  }

  public static final int SAMPLE_INTERVAL_FIELD_NUMBER = 3;
  private long sampleInterval_;
  /**
   * <pre>
   * ns between samples in SAMPLE mode.
   * </pre>
   *
   * <code>uint64 sample_interval = 3;</code>
   */
  public long getSampleInterval() {
    return sampleInterval_;
  }

  public static final int SUPPRESS_REDUNDANT_FIELD_NUMBER = 4;
  private boolean suppressRedundant_;
  /**
   * <pre>
   * Indicates whether values that have not changed should be sent in a SAMPLE
   * subscription.
   * </pre>
   *
   * <code>bool suppress_redundant = 4;</code>
   */
  public boolean getSuppressRedundant() {
    return suppressRedundant_;
  }

  public static final int HEARTBEAT_INTERVAL_FIELD_NUMBER = 5;
  private long heartbeatInterval_;
  /**
   * <pre>
   * Specifies the maximum allowable silent period in nanoseconds when
   * suppress_redundant is in use. The target should send a value at least once
   * in the period specified.
   * </pre>
   *
   * <code>uint64 heartbeat_interval = 5;</code>
   */
  public long getHeartbeatInterval() {
    return heartbeatInterval_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (path_ != null) {
      output.writeMessage(1, getPath());
    }
    if (mode_ != com.github.gnmi.proto.SubscriptionMode.TARGET_DEFINED.getNumber()) {
      output.writeEnum(2, mode_);
    }
    if (sampleInterval_ != 0L) {
      output.writeUInt64(3, sampleInterval_);
    }
    if (suppressRedundant_ != false) {
      output.writeBool(4, suppressRedundant_);
    }
    if (heartbeatInterval_ != 0L) {
      output.writeUInt64(5, heartbeatInterval_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (path_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPath());
    }
    if (mode_ != com.github.gnmi.proto.SubscriptionMode.TARGET_DEFINED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, mode_);
    }
    if (sampleInterval_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, sampleInterval_);
    }
    if (suppressRedundant_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, suppressRedundant_);
    }
    if (heartbeatInterval_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(5, heartbeatInterval_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.gnmi.proto.Subscription)) {
      return super.equals(obj);
    }
    com.github.gnmi.proto.Subscription other = (com.github.gnmi.proto.Subscription) obj;

    boolean result = true;
    result = result && (hasPath() == other.hasPath());
    if (hasPath()) {
      result = result && getPath()
          .equals(other.getPath());
    }
    result = result && mode_ == other.mode_;
    result = result && (getSampleInterval()
        == other.getSampleInterval());
    result = result && (getSuppressRedundant()
        == other.getSuppressRedundant());
    result = result && (getHeartbeatInterval()
        == other.getHeartbeatInterval());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPath()) {
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
    }
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (37 * hash) + SAMPLE_INTERVAL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSampleInterval());
    hash = (37 * hash) + SUPPRESS_REDUNDANT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSuppressRedundant());
    hash = (37 * hash) + HEARTBEAT_INTERVAL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getHeartbeatInterval());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.gnmi.proto.Subscription parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.gnmi.proto.Subscription parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.gnmi.proto.Subscription parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.gnmi.proto.Subscription parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.gnmi.proto.Subscription prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Subscription is a single request within a SubscriptionList. The path
   * specified is interpreted (along with the prefix) as the elements of the data
   * tree that the client is subscribing to. The mode determines how the target
   * should trigger updates to be sent.
   * Reference: gNMI Specification Section 3.5.1.3
   * </pre>
   *
   * Protobuf type {@code gnmi.Subscription}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:gnmi.Subscription)
      com.github.gnmi.proto.SubscriptionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.gnmi.proto.GnmiProto.internal_static_gnmi_Subscription_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.gnmi.proto.GnmiProto.internal_static_gnmi_Subscription_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.gnmi.proto.Subscription.class, com.github.gnmi.proto.Subscription.Builder.class);
    }

    // Construct using com.github.gnmi.proto.Subscription.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (pathBuilder_ == null) {
        path_ = null;
      } else {
        path_ = null;
        pathBuilder_ = null;
      }
      mode_ = 0;

      sampleInterval_ = 0L;

      suppressRedundant_ = false;

      heartbeatInterval_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.gnmi.proto.GnmiProto.internal_static_gnmi_Subscription_descriptor;
    }

    @java.lang.Override
    public com.github.gnmi.proto.Subscription getDefaultInstanceForType() {
      return com.github.gnmi.proto.Subscription.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.gnmi.proto.Subscription build() {
      com.github.gnmi.proto.Subscription result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.gnmi.proto.Subscription buildPartial() {
      com.github.gnmi.proto.Subscription result = new com.github.gnmi.proto.Subscription(this);
      if (pathBuilder_ == null) {
        result.path_ = path_;
      } else {
        result.path_ = pathBuilder_.build();
      }
      result.mode_ = mode_;
      result.sampleInterval_ = sampleInterval_;
      result.suppressRedundant_ = suppressRedundant_;
      result.heartbeatInterval_ = heartbeatInterval_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.gnmi.proto.Subscription) {
        return mergeFrom((com.github.gnmi.proto.Subscription)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.gnmi.proto.Subscription other) {
      if (other == com.github.gnmi.proto.Subscription.getDefaultInstance()) return this;
      if (other.hasPath()) {
        mergePath(other.getPath());
      }
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (other.getSampleInterval() != 0L) {
        setSampleInterval(other.getSampleInterval());
      }
      if (other.getSuppressRedundant() != false) {
        setSuppressRedundant(other.getSuppressRedundant());
      }
      if (other.getHeartbeatInterval() != 0L) {
        setHeartbeatInterval(other.getHeartbeatInterval());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.gnmi.proto.Subscription parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.gnmi.proto.Subscription) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.github.gnmi.proto.Path path_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.gnmi.proto.Path, com.github.gnmi.proto.Path.Builder, com.github.gnmi.proto.PathOrBuilder> pathBuilder_;
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public boolean hasPath() {
      return pathBuilder_ != null || path_ != null;
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public com.github.gnmi.proto.Path getPath() {
      if (pathBuilder_ == null) {
        return path_ == null ? com.github.gnmi.proto.Path.getDefaultInstance() : path_;
      } else {
        return pathBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public Builder setPath(com.github.gnmi.proto.Path value) {
      if (pathBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        path_ = value;
        onChanged();
      } else {
        pathBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public Builder setPath(
        com.github.gnmi.proto.Path.Builder builderForValue) {
      if (pathBuilder_ == null) {
        path_ = builderForValue.build();
        onChanged();
      } else {
        pathBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public Builder mergePath(com.github.gnmi.proto.Path value) {
      if (pathBuilder_ == null) {
        if (path_ != null) {
          path_ =
            com.github.gnmi.proto.Path.newBuilder(path_).mergeFrom(value).buildPartial();
        } else {
          path_ = value;
        }
        onChanged();
      } else {
        pathBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public Builder clearPath() {
      if (pathBuilder_ == null) {
        path_ = null;
        onChanged();
      } else {
        path_ = null;
        pathBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public com.github.gnmi.proto.Path.Builder getPathBuilder() {
      
      onChanged();
      return getPathFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    public com.github.gnmi.proto.PathOrBuilder getPathOrBuilder() {
      if (pathBuilder_ != null) {
        return pathBuilder_.getMessageOrBuilder();
      } else {
        return path_ == null ?
            com.github.gnmi.proto.Path.getDefaultInstance() : path_;
      }
    }
    /**
     * <pre>
     * The data tree path.
     * </pre>
     *
     * <code>.gnmi.Path path = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.gnmi.proto.Path, com.github.gnmi.proto.Path.Builder, com.github.gnmi.proto.PathOrBuilder> 
        getPathFieldBuilder() {
      if (pathBuilder_ == null) {
        pathBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.gnmi.proto.Path, com.github.gnmi.proto.Path.Builder, com.github.gnmi.proto.PathOrBuilder>(
                getPath(),
                getParentForChildren(),
                isClean());
        path_ = null;
      }
      return pathBuilder_;
    }

    private int mode_ = 0;
    /**
     * <pre>
     * Subscription mode to be used.
     * </pre>
     *
     * <code>.gnmi.SubscriptionMode mode = 2;</code>
     */
    public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * Subscription mode to be used.
     * </pre>
     *
     * <code>.gnmi.SubscriptionMode mode = 2;</code>
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Subscription mode to be used.
     * </pre>
     *
     * <code>.gnmi.SubscriptionMode mode = 2;</code>
     */
    public com.github.gnmi.proto.SubscriptionMode getMode() {
      @SuppressWarnings("deprecation")
      com.github.gnmi.proto.SubscriptionMode result = com.github.gnmi.proto.SubscriptionMode.valueOf(mode_);
      return result == null ? com.github.gnmi.proto.SubscriptionMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Subscription mode to be used.
     * </pre>
     *
     * <code>.gnmi.SubscriptionMode mode = 2;</code>
     */
    public Builder setMode(com.github.gnmi.proto.SubscriptionMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Subscription mode to be used.
     * </pre>
     *
     * <code>.gnmi.SubscriptionMode mode = 2;</code>
     */
    public Builder clearMode() {
      
      mode_ = 0;
      onChanged();
      return this;
    }

    private long sampleInterval_ ;
    /**
     * <pre>
     * ns between samples in SAMPLE mode.
     * </pre>
     *
     * <code>uint64 sample_interval = 3;</code>
     */
    public long getSampleInterval() {
      return sampleInterval_;
    }
    /**
     * <pre>
     * ns between samples in SAMPLE mode.
     * </pre>
     *
     * <code>uint64 sample_interval = 3;</code>
     */
    public Builder setSampleInterval(long value) {
      
      sampleInterval_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ns between samples in SAMPLE mode.
     * </pre>
     *
     * <code>uint64 sample_interval = 3;</code>
     */
    public Builder clearSampleInterval() {
      
      sampleInterval_ = 0L;
      onChanged();
      return this;
    }

    private boolean suppressRedundant_ ;
    /**
     * <pre>
     * Indicates whether values that have not changed should be sent in a SAMPLE
     * subscription.
     * </pre>
     *
     * <code>bool suppress_redundant = 4;</code>
     */
    public boolean getSuppressRedundant() {
      return suppressRedundant_;
    }
    /**
     * <pre>
     * Indicates whether values that have not changed should be sent in a SAMPLE
     * subscription.
     * </pre>
     *
     * <code>bool suppress_redundant = 4;</code>
     */
    public Builder setSuppressRedundant(boolean value) {
      
      suppressRedundant_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates whether values that have not changed should be sent in a SAMPLE
     * subscription.
     * </pre>
     *
     * <code>bool suppress_redundant = 4;</code>
     */
    public Builder clearSuppressRedundant() {
      
      suppressRedundant_ = false;
      onChanged();
      return this;
    }

    private long heartbeatInterval_ ;
    /**
     * <pre>
     * Specifies the maximum allowable silent period in nanoseconds when
     * suppress_redundant is in use. The target should send a value at least once
     * in the period specified.
     * </pre>
     *
     * <code>uint64 heartbeat_interval = 5;</code>
     */
    public long getHeartbeatInterval() {
      return heartbeatInterval_;
    }
    /**
     * <pre>
     * Specifies the maximum allowable silent period in nanoseconds when
     * suppress_redundant is in use. The target should send a value at least once
     * in the period specified.
     * </pre>
     *
     * <code>uint64 heartbeat_interval = 5;</code>
     */
    public Builder setHeartbeatInterval(long value) {
      
      heartbeatInterval_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the maximum allowable silent period in nanoseconds when
     * suppress_redundant is in use. The target should send a value at least once
     * in the period specified.
     * </pre>
     *
     * <code>uint64 heartbeat_interval = 5;</code>
     */
    public Builder clearHeartbeatInterval() {
      
      heartbeatInterval_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:gnmi.Subscription)
  }

  // @@protoc_insertion_point(class_scope:gnmi.Subscription)
  private static final com.github.gnmi.proto.Subscription DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.gnmi.proto.Subscription();
  }

  public static com.github.gnmi.proto.Subscription getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Subscription>
      PARSER = new com.google.protobuf.AbstractParser<Subscription>() {
    @java.lang.Override
    public Subscription parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Subscription(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Subscription> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Subscription> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.gnmi.proto.Subscription getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

